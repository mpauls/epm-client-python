# coding: utf-8

"""
    EPM REST API

    REST API description of the ElasTest Platform Manager Module.

    OpenAPI spec version: 0.1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PoP(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_info=None, id=None, interface_endpoint=None, interface_info=None, name=None):
        """
        PoP - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_info': 'list[KeyValuePair]',
            'id': 'str',
            'interface_endpoint': 'str',
            'interface_info': 'list[KeyValuePair]',
            'name': 'str'
        }

        self.attribute_map = {
            'access_info': 'accessInfo',
            'id': 'id',
            'interface_endpoint': 'interfaceEndpoint',
            'interface_info': 'interfaceInfo',
            'name': 'name'
        }

        self._access_info = access_info
        self._id = id
        self._interface_endpoint = interface_endpoint
        self._interface_info = interface_info
        self._name = name

    @property
    def access_info(self):
        """
        Gets the access_info of this PoP.
        Authentication credentials for accessing the PoP. Examples may include those to support different authentication schemes, e.g. OAuth, Token, etc.

        :return: The access_info of this PoP.
        :rtype: list[KeyValuePair]
        """
        return self._access_info

    @access_info.setter
    def access_info(self, access_info):
        """
        Sets the access_info of this PoP.
        Authentication credentials for accessing the PoP. Examples may include those to support different authentication schemes, e.g. OAuth, Token, etc.

        :param access_info: The access_info of this PoP.
        :type: list[KeyValuePair]
        """
        if access_info is None:
            raise ValueError("Invalid value for `access_info`, must not be `None`")

        self._access_info = access_info

    @property
    def id(self):
        """
        Gets the id of this PoP.
        Identifier of the PoP

        :return: The id of this PoP.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PoP.
        Identifier of the PoP

        :param id: The id of this PoP.
        :type: str
        """

        self._id = id

    @property
    def interface_endpoint(self):
        """
        Gets the interface_endpoint of this PoP.
        Information about the interface endpoint. An example is a URL.

        :return: The interface_endpoint of this PoP.
        :rtype: str
        """
        return self._interface_endpoint

    @interface_endpoint.setter
    def interface_endpoint(self, interface_endpoint):
        """
        Sets the interface_endpoint of this PoP.
        Information about the interface endpoint. An example is a URL.

        :param interface_endpoint: The interface_endpoint of this PoP.
        :type: str
        """
        if interface_endpoint is None:
            raise ValueError("Invalid value for `interface_endpoint`, must not be `None`")

        self._interface_endpoint = interface_endpoint

    @property
    def interface_info(self):
        """
        Gets the interface_info of this PoP.
        Information about the interface(s) to the PoP, including PoP provider type, API version, and protocol type.

        :return: The interface_info of this PoP.
        :rtype: list[KeyValuePair]
        """
        return self._interface_info

    @interface_info.setter
    def interface_info(self, interface_info):
        """
        Sets the interface_info of this PoP.
        Information about the interface(s) to the PoP, including PoP provider type, API version, and protocol type.

        :param interface_info: The interface_info of this PoP.
        :type: list[KeyValuePair]
        """
        if interface_info is None:
            raise ValueError("Invalid value for `interface_info`, must not be `None`")

        self._interface_info = interface_info

    @property
    def name(self):
        """
        Gets the name of this PoP.
        Human-readable identifier of this PoP information element

        :return: The name of this PoP.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PoP.
        Human-readable identifier of this PoP information element

        :param name: The name of this PoP.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PoP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
